###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         03/Dec/2022  01:48:52
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =  C:\Users\Jungjinseong\IAR_projects\user\ultrasonic.c
#    Command line      =
#        -f C:\Users\Jungjinseong\IAR_projects\Debug\Obj\user\ultrasonic.o.rsp
#        (C:\Users\Jungjinseong\IAR_projects\user\ultrasonic.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\Jungjinseong\IAR_projects\Debug\List\user -o
#        C:\Users\Jungjinseong\IAR_projects\Debug\Obj\user --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.1_2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\Jungjinseong\IAR_projects\libraries\CMSIS\DeviceSupport\ -I
#        C:\Users\Jungjinseong\IAR_projects\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\Jungjinseong\IAR_projects\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\Jungjinseong\IAR_projects\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\Jungjinseong\IAR_projects\libraries\LCD\ -I
#        C:\Users\Jungjinseong\IAR_projects\user\ -I
#        C:\Users\Jungjinseong\IAR_projects\user\inc\ -Ol -I "C:\Program
#        Files\IAR Systems\Embedded Workbench 9.1_2\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\Users\Jungjinseong\IAR_projects\Debug\Obj\user\ultrasonic.o.d
#    Locale            =  C
#    List file         =
#        C:\Users\Jungjinseong\IAR_projects\Debug\List\user\ultrasonic.lst
#    Object file       =
#        C:\Users\Jungjinseong\IAR_projects\Debug\Obj\user\ultrasonic.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\Jungjinseong\IAR_projects\user\ultrasonic.c
      1          #include "ultrasonic.h"
      2          #include "stm32f10x.h"
      3          #include "stm32f10x_rcc.h"
      4          #include "stm32f10x_gpio.h"
      5          
      6          
      7          
      8          /**
      9           *   How to use this driver:
     10           *    1. Implement EnableHCSR04PeriphClock function and turn on clock for used peripherals
     11           *       ex:
     12           *       void EnableHCSR04PeriphClock() {
     13           *         RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
     14           *         RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
     15           *         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
     16           *      }
     17           *   2. Call InitHCSR04();
     18           *   3. Get distance (in mm) using HCSR04GetDistance function.
     19           *      Value lower than zero means no echo received (distance >3m)
     20           *      Measuring takes about 65ms
     21           *
     22           *   If necessary, change defines above, but be careful, US_ECHO_PIN must be tim ch1
     23           *   and US_TRIG_PIN must be ch3 or ch4. In case of ch4 change TIM_OC3Init into TIM_OC4Init in stm32f10x_HC-SR04.c file
     24           */
     25          
     26          
     27          
     28          /**
     29           * Implement this function. See instruction at the top of this file.
     30           */
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void EnableHCSR04PeriphClock() {
   \                     EnableHCSR04PeriphClock: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     33              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0x2004             MOVS     R0,#+4
   \        0x6   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     34              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x2008             MOVS     R0,#+8
   \        0xE   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     35              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
   \       0x12   0x2101             MOVS     R1,#+1
   \       0x14   0x2002             MOVS     R0,#+2
   \       0x16   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     36              
     37              //updata
     38              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
   \       0x1A   0x2101             MOVS     R1,#+1
   \       0x1C   0x2008             MOVS     R0,#+8
   \       0x1E   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     39              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
   \       0x22   0x2101             MOVS     R1,#+1
   \       0x24   0x2001             MOVS     R0,#+1
   \       0x26   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     40            }
   \       0x2A   0xBD01             POP      {R0,PC}
     41          
     42          /**
     43           * Initialization of HCSR04's peripherals
     44           */
     45          
     46          
     47          /**
     48           * Measure distance and get value in mm. Lower than 0 means no echo signal: distance more than ~3m.
     49           */
     50          
     51          
     52          

   \                                 In section .text, align 2, keep-with-next
     53          static void initMeasureTimer() {
   \                     initMeasureTimer: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB08F             SUB      SP,SP,#+60
     54             RCC_ClocksTypeDef RCC_ClocksStatus;
     55             RCC_GetClocksFreq(&RCC_ClocksStatus);
   \        0x4   0xA80A             ADD      R0,SP,#+40
   \        0x6   0x.... 0x....      BL       RCC_GetClocksFreq
     56             uint16_t prescaler = RCC_ClocksStatus.SYSCLK_Frequency / 1000000 - 1; //1 tick = 1us (1 tick = 0.165mm resolution)
   \        0xA   0x980A             LDR      R0,[SP, #+40]
   \        0xC   0x.... 0x....      LDR.W    R1,??DataTable8
   \       0x10   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \       0x14   0x1E45             SUBS     R5,R0,#+1
     57          
     58             TIM_DeInit(US_TIMER);
   \       0x16   0x....             LDR.N    R4,??DataTable8_1
   \       0x18   0x0020             MOVS     R0,R4
   \       0x1A   0x.... 0x....      BL       TIM_DeInit
     59             TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
     60             TIM_TimeBaseInitStruct.TIM_Prescaler = prescaler;
   \       0x1E   0xF8AD 0x500C      STRH     R5,[SP, #+12]
     61             TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0xF8AD 0x000E      STRH     R0,[SP, #+14]
     62             TIM_TimeBaseInitStruct.TIM_Period = 0xFFFF;
   \       0x28   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x2C   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     63             TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0xF8AD 0x0012      STRH     R0,[SP, #+18]
     64             TIM_TimeBaseInit(US_TIMER, &TIM_TimeBaseInitStruct);
   \       0x36   0xA903             ADD      R1,SP,#+12
   \       0x38   0x0020             MOVS     R0,R4
   \       0x3A   0x.... 0x....      BL       TIM_TimeBaseInit
     65          
     66             TIM_OCInitTypeDef TIM_OCInitStruct;
     67             TIM_OCStructInit(&TIM_OCInitStruct);
   \       0x3E   0xA806             ADD      R0,SP,#+24
   \       0x40   0x.... 0x....      BL       TIM_OCStructInit
     68             TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
   \       0x44   0x2060             MOVS     R0,#+96
   \       0x46   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     69             TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
   \       0x4A   0x2001             MOVS     R0,#+1
   \       0x4C   0xF8AD 0x001A      STRH     R0,[SP, #+26]
     70             TIM_OCInitStruct.TIM_Pulse = 15; //us
   \       0x50   0x200F             MOVS     R0,#+15
   \       0x52   0xF8AD 0x001E      STRH     R0,[SP, #+30]
     71             TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xF8AD 0x0020      STRH     R0,[SP, #+32]
     72             TIM_OC3Init(US_TIMER, &TIM_OCInitStruct);
   \       0x5C   0xA906             ADD      R1,SP,#+24
   \       0x5E   0x0020             MOVS     R0,R4
   \       0x60   0x.... 0x....      BL       TIM_OC3Init
     73          
     74             TIM_ICInitTypeDef TIM_ICInitStruct;
     75             TIM_ICInitStruct.TIM_Channel = TIM_Channel_1;
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     76             TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Rising;
   \       0x6A   0x2000             MOVS     R0,#+0
   \       0x6C   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     77             TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
   \       0x70   0x2001             MOVS     R0,#+1
   \       0x72   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     78             TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
   \       0x76   0x2000             MOVS     R0,#+0
   \       0x78   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     79             TIM_ICInitStruct.TIM_ICFilter = 0;
   \       0x7C   0x2000             MOVS     R0,#+0
   \       0x7E   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     80          
     81             TIM_PWMIConfig(US_TIMER, &TIM_ICInitStruct);
   \       0x82   0x4669             MOV      R1,SP
   \       0x84   0x0020             MOVS     R0,R4
   \       0x86   0x.... 0x....      BL       TIM_PWMIConfig
     82             TIM_SelectInputTrigger(US_TIMER, US_TIMER_TRIG_SOURCE);
   \       0x8A   0x2150             MOVS     R1,#+80
   \       0x8C   0x0020             MOVS     R0,R4
   \       0x8E   0x.... 0x....      BL       TIM_SelectInputTrigger
     83             TIM_SelectMasterSlaveMode(US_TIMER, TIM_MasterSlaveMode_Enable);
   \       0x92   0x2180             MOVS     R1,#+128
   \       0x94   0x0020             MOVS     R0,R4
   \       0x96   0x.... 0x....      BL       TIM_SelectMasterSlaveMode
     84          
     85             TIM_CtrlPWMOutputs(US_TIMER, ENABLE);
   \       0x9A   0x2101             MOVS     R1,#+1
   \       0x9C   0x0020             MOVS     R0,R4
   \       0x9E   0x.... 0x....      BL       TIM_CtrlPWMOutputs
     86          
     87             TIM_ClearFlag(US_TIMER, TIM_FLAG_Update);
   \       0xA2   0x2101             MOVS     R1,#+1
   \       0xA4   0x0020             MOVS     R0,R4
   \       0xA6   0x.... 0x....      BL       TIM_ClearFlag
     88          }
   \       0xAA   0xB00F             ADD      SP,SP,#+60
   \       0xAC   0xBD30             POP      {R4,R5,PC}
     89          
     90          //update

   \                                 In section .text, align 2, keep-with-next
     91          static void initMeasureTimer2() {
   \                     initMeasureTimer2: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB08F             SUB      SP,SP,#+60
     92             RCC_ClocksTypeDef RCC_ClocksStatus;
     93             RCC_GetClocksFreq(&RCC_ClocksStatus);
   \        0x4   0xA80A             ADD      R0,SP,#+40
   \        0x6   0x.... 0x....      BL       RCC_GetClocksFreq
     94             uint16_t prescaler = RCC_ClocksStatus.SYSCLK_Frequency / 1000000 - 1; //1 tick = 1us (1 tick = 0.165mm resolution)
   \        0xA   0x980A             LDR      R0,[SP, #+40]
   \        0xC   0x....             LDR.N    R1,??DataTable8
   \        0xE   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \       0x12   0x1E45             SUBS     R5,R0,#+1
     95          
     96             TIM_DeInit(TIM5);
   \       0x14   0x....             LDR.N    R4,??DataTable8_2
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x.... 0x....      BL       TIM_DeInit
     97             TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
     98             TIM_TimeBaseInitStruct.TIM_Prescaler = prescaler;
   \       0x1C   0xF8AD 0x500C      STRH     R5,[SP, #+12]
     99             TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    100             TIM_TimeBaseInitStruct.TIM_Period = 0xFFFF;
   \       0x26   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x2A   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    101             TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    102             TIM_TimeBaseInit(TIM5, &TIM_TimeBaseInitStruct);
   \       0x34   0xA903             ADD      R1,SP,#+12
   \       0x36   0x0020             MOVS     R0,R4
   \       0x38   0x.... 0x....      BL       TIM_TimeBaseInit
    103          
    104             TIM_OCInitTypeDef TIM_OCInitStruct;
    105             TIM_OCStructInit(&TIM_OCInitStruct);
   \       0x3C   0xA806             ADD      R0,SP,#+24
   \       0x3E   0x.... 0x....      BL       TIM_OCStructInit
    106             TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
   \       0x42   0x2060             MOVS     R0,#+96
   \       0x44   0xF8AD 0x0018      STRH     R0,[SP, #+24]
    107             TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
   \       0x48   0x2001             MOVS     R0,#+1
   \       0x4A   0xF8AD 0x001A      STRH     R0,[SP, #+26]
    108             TIM_OCInitStruct.TIM_Pulse = 15; //us
   \       0x4E   0x200F             MOVS     R0,#+15
   \       0x50   0xF8AD 0x001E      STRH     R0,[SP, #+30]
    109             TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0xF8AD 0x0020      STRH     R0,[SP, #+32]
    110             TIM_OC3Init(TIM5, &TIM_OCInitStruct);
   \       0x5A   0xA906             ADD      R1,SP,#+24
   \       0x5C   0x0020             MOVS     R0,R4
   \       0x5E   0x.... 0x....      BL       TIM_OC3Init
    111          
    112             //input capture config
    113             TIM_ICInitTypeDef TIM_ICInitStruct;
    114             TIM_ICInitStruct.TIM_Channel = TIM_Channel_1;
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    115             TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Rising;
   \       0x68   0x2000             MOVS     R0,#+0
   \       0x6A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    116             TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
   \       0x6E   0x2001             MOVS     R0,#+1
   \       0x70   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    117             TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
   \       0x74   0x2000             MOVS     R0,#+0
   \       0x76   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    118             TIM_ICInitStruct.TIM_ICFilter = 0;
   \       0x7A   0x2000             MOVS     R0,#+0
   \       0x7C   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    119          
    120             TIM_PWMIConfig(TIM5, &TIM_ICInitStruct);
   \       0x80   0x4669             MOV      R1,SP
   \       0x82   0x0020             MOVS     R0,R4
   \       0x84   0x.... 0x....      BL       TIM_PWMIConfig
    121             TIM_SelectInputTrigger(TIM5, inputTriger_updated);
   \       0x88   0x2150             MOVS     R1,#+80
   \       0x8A   0x0020             MOVS     R0,R4
   \       0x8C   0x.... 0x....      BL       TIM_SelectInputTrigger
    122             TIM_SelectMasterSlaveMode(TIM5, TIM_MasterSlaveMode_Enable);
   \       0x90   0x2180             MOVS     R1,#+128
   \       0x92   0x0020             MOVS     R0,R4
   \       0x94   0x.... 0x....      BL       TIM_SelectMasterSlaveMode
    123          
    124             TIM_CtrlPWMOutputs(TIM5, ENABLE);
   \       0x98   0x2101             MOVS     R1,#+1
   \       0x9A   0x0020             MOVS     R0,R4
   \       0x9C   0x.... 0x....      BL       TIM_CtrlPWMOutputs
    125          
    126             TIM_ClearFlag(TIM5, TIM_FLAG_Update);
   \       0xA0   0x2101             MOVS     R1,#+1
   \       0xA2   0x0020             MOVS     R0,R4
   \       0xA4   0x.... 0x....      BL       TIM_ClearFlag
    127          }
   \       0xA8   0xB00F             ADD      SP,SP,#+60
   \       0xAA   0xBD30             POP      {R4,R5,PC}
    128          
    129          //------------------------------ have to change below

   \                                 In section .text, align 2, keep-with-next
    130          static void initMeasureTimer3() {
   \                     initMeasureTimer3: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB08F             SUB      SP,SP,#+60
    131             RCC_ClocksTypeDef RCC_ClocksStatus;
    132             RCC_GetClocksFreq(&RCC_ClocksStatus);
   \        0x4   0xA80A             ADD      R0,SP,#+40
   \        0x6   0x.... 0x....      BL       RCC_GetClocksFreq
    133             uint16_t prescaler = RCC_ClocksStatus.SYSCLK_Frequency / 1000000 - 1; //1 tick = 1us (1 tick = 0.165mm resolution)
   \        0xA   0x980A             LDR      R0,[SP, #+40]
   \        0xC   0x....             LDR.N    R1,??DataTable8
   \        0xE   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \       0x12   0x1E44             SUBS     R4,R0,#+1
    134          
    135             TIM_DeInit(TIM2);
   \       0x14   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x18   0x.... 0x....      BL       TIM_DeInit
    136             TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
    137             TIM_TimeBaseInitStruct.TIM_Prescaler = prescaler;
   \       0x1C   0xF8AD 0x400C      STRH     R4,[SP, #+12]
    138             TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    139             TIM_TimeBaseInitStruct.TIM_Period = 0xFFFF;
   \       0x26   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x2A   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    140             TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    141             TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStruct);
   \       0x34   0xA903             ADD      R1,SP,#+12
   \       0x36   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x3A   0x.... 0x....      BL       TIM_TimeBaseInit
    142          
    143             TIM_OCInitTypeDef TIM_OCInitStruct;
    144             TIM_OCStructInit(&TIM_OCInitStruct);
   \       0x3E   0xA806             ADD      R0,SP,#+24
   \       0x40   0x.... 0x....      BL       TIM_OCStructInit
    145             TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
   \       0x44   0x2060             MOVS     R0,#+96
   \       0x46   0xF8AD 0x0018      STRH     R0,[SP, #+24]
    146             TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
   \       0x4A   0x2001             MOVS     R0,#+1
   \       0x4C   0xF8AD 0x001A      STRH     R0,[SP, #+26]
    147             TIM_OCInitStruct.TIM_Pulse = 15; //us
   \       0x50   0x200F             MOVS     R0,#+15
   \       0x52   0xF8AD 0x001E      STRH     R0,[SP, #+30]
    148             TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xF8AD 0x0020      STRH     R0,[SP, #+32]
    149             TIM_OC4Init(TIM2, &TIM_OCInitStruct);//using channel 4 (trig)
   \       0x5C   0xA906             ADD      R1,SP,#+24
   \       0x5E   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x62   0x.... 0x....      BL       TIM_OC4Init
    150          
    151                //input capture config
    152             TIM_ICInitTypeDef TIM_ICInitStruct;
    153             TIM_ICInitStruct.TIM_Channel = TIM_Channel_2;
   \       0x66   0x2004             MOVS     R0,#+4
   \       0x68   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    154             TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_Falling;
   \       0x6C   0x2002             MOVS     R0,#+2
   \       0x6E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    155             TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
   \       0x72   0x2001             MOVS     R0,#+1
   \       0x74   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    156             TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
   \       0x78   0x2000             MOVS     R0,#+0
   \       0x7A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    157             TIM_ICInitStruct.TIM_ICFilter = 0;
   \       0x7E   0x2000             MOVS     R0,#+0
   \       0x80   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    158          
    159             TIM_PWMIConfig(TIM2, &TIM_ICInitStruct);
   \       0x84   0x4669             MOV      R1,SP
   \       0x86   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x8A   0x.... 0x....      BL       TIM_PWMIConfig
    160             TIM_SelectInputTrigger(TIM2, TIM_TS_TI2FP2);
   \       0x8E   0x2160             MOVS     R1,#+96
   \       0x90   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x94   0x.... 0x....      BL       TIM_SelectInputTrigger
    161             TIM_SelectMasterSlaveMode(TIM2, TIM_MasterSlaveMode_Enable);
   \       0x98   0x2180             MOVS     R1,#+128
   \       0x9A   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x9E   0x.... 0x....      BL       TIM_SelectMasterSlaveMode
    162          
    163             TIM_CtrlPWMOutputs(TIM2, ENABLE);
   \       0xA2   0x2101             MOVS     R1,#+1
   \       0xA4   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0xA8   0x.... 0x....      BL       TIM_CtrlPWMOutputs
    164          
    165             TIM_ClearFlag(TIM2, TIM_FLAG_Update);
   \       0xAC   0x2101             MOVS     R1,#+1
   \       0xAE   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0xB2   0x.... 0x....      BL       TIM_ClearFlag
    166          }
   \       0xB6   0xB010             ADD      SP,SP,#+64
   \       0xB8   0xBD10             POP      {R4,PC}
    167          //end of update
    168          

   \                                 In section .text, align 2, keep-with-next
    169          static void initPins() {
   \                     initPins: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
    170             GPIO_InitTypeDef GPIO_InitStructure;
    171             
    172                //update
    173             GPIO_InitStructure.GPIO_Pin = US_TRIG_PIN2;
   \        0x2   0x2004             MOVS     R0,#+4
   \        0x4   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    174             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \        0x8   0x2003             MOVS     R0,#+3
   \        0xA   0xF88D 0x0002      STRB     R0,[SP, #+2]
    175             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \        0xE   0x2018             MOVS     R0,#+24
   \       0x10   0xF88D 0x0003      STRB     R0,[SP, #+3]
    176             GPIO_Init(US_TRIG_PORT2, &GPIO_InitStructure);
   \       0x14   0x....             LDR.N    R4,??DataTable8_3
   \       0x16   0x4669             MOV      R1,SP
   \       0x18   0x0020             MOVS     R0,R4
   \       0x1A   0x.... 0x....      BL       GPIO_Init
    177             
    178             
    179              GPIO_InitStructure.GPIO_Pin = US_ECHO_PIN2;
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    180             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x24   0x2003             MOVS     R0,#+3
   \       0x26   0xF88D 0x0002      STRB     R0,[SP, #+2]
    181             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   \       0x2A   0x2004             MOVS     R0,#+4
   \       0x2C   0xF88D 0x0003      STRB     R0,[SP, #+3]
    182             GPIO_Init(US_TRIG_PORT2, &GPIO_InitStructure);
   \       0x30   0x4669             MOV      R1,SP
   \       0x32   0x0020             MOVS     R0,R4
   \       0x34   0x.... 0x....      BL       GPIO_Init
    183             //------------------------------ have to change below
    184             GPIO_InitStructure.GPIO_Pin = US_TRIG_PIN3;
   \       0x38   0x2008             MOVS     R0,#+8
   \       0x3A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    185             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x3E   0x2003             MOVS     R0,#+3
   \       0x40   0xF88D 0x0002      STRB     R0,[SP, #+2]
    186             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \       0x44   0x2018             MOVS     R0,#+24
   \       0x46   0xF88D 0x0003      STRB     R0,[SP, #+3]
    187             GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x4A   0x4669             MOV      R1,SP
   \       0x4C   0x0020             MOVS     R0,R4
   \       0x4E   0x.... 0x....      BL       GPIO_Init
    188             
    189             
    190              GPIO_InitStructure.GPIO_Pin = US_ECHO_PIN3;
   \       0x52   0x2002             MOVS     R0,#+2
   \       0x54   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    191             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x58   0x2003             MOVS     R0,#+3
   \       0x5A   0xF88D 0x0002      STRB     R0,[SP, #+2]
    192             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   \       0x5E   0x2004             MOVS     R0,#+4
   \       0x60   0xF88D 0x0003      STRB     R0,[SP, #+3]
    193             GPIO_Init(GPIOA, &GPIO_InitStructure);
   \       0x64   0x4669             MOV      R1,SP
   \       0x66   0x0020             MOVS     R0,R4
   \       0x68   0x.... 0x....      BL       GPIO_Init
    194          
    195             
    196             //
    197             GPIO_InitStructure.GPIO_Pin = US_TRIG_PIN;
   \       0x6C   0x2001             MOVS     R0,#+1
   \       0x6E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    198             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x72   0x2003             MOVS     R0,#+3
   \       0x74   0xF88D 0x0002      STRB     R0,[SP, #+2]
    199             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \       0x78   0x2018             MOVS     R0,#+24
   \       0x7A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    200             GPIO_Init(US_TRIG_PORT, &GPIO_InitStructure);
   \       0x7E   0x4669             MOV      R1,SP
   \       0x80   0x....             LDR.N    R0,??DataTable8_4
   \       0x82   0x.... 0x....      BL       GPIO_Init
    201             
    202             
    203              GPIO_InitStructure.GPIO_Pin = US_ECHO_PIN;
   \       0x86   0x2040             MOVS     R0,#+64
   \       0x88   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    204             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \       0x8C   0x2003             MOVS     R0,#+3
   \       0x8E   0xF88D 0x0002      STRB     R0,[SP, #+2]
    205             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   \       0x92   0x2004             MOVS     R0,#+4
   \       0x94   0xF88D 0x0003      STRB     R0,[SP, #+3]
    206             GPIO_Init(US_ECHO_PORT, &GPIO_InitStructure);
   \       0x98   0x4669             MOV      R1,SP
   \       0x9A   0x0020             MOVS     R0,R4
   \       0x9C   0x.... 0x....      BL       GPIO_Init
    207             
    208          
    209          }
   \       0xA0   0xBD13             POP      {R0,R1,R4,PC}
    210          

   \                                 In section .text, align 2, keep-with-next
    211          void InitHCSR04() {
   \                     InitHCSR04: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    212             EnableHCSR04PeriphClock();
   \        0x2   0x.... 0x....      BL       EnableHCSR04PeriphClock
    213             initPins();
   \        0x6   0x.... 0x....      BL       initPins
    214                //update
    215             initMeasureTimer2();
   \        0xA   0x.... 0x....      BL       initMeasureTimer2
    216             initMeasureTimer3();
   \        0xE   0x.... 0x....      BL       initMeasureTimer3
    217             //
    218             initMeasureTimer();
   \       0x12   0x.... 0x....      BL       initMeasureTimer
    219             
    220          }
   \       0x16   0xBD01             POP      {R0,PC}
    221          

   \                                 In section .text, align 2, keep-with-next
    222          int32_t HCSR04GetDistance() {
   \                     HCSR04GetDistance: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    223             (US_TIMER)->CNT = 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x....             LDR.N    R1,??DataTable8_5
   \        0x6   0x8008             STRH     R0,[R1, #+0]
    224             TIM_Cmd(US_TIMER, ENABLE);
   \        0x8   0x....             LDR.N    R4,??DataTable8_1
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x.... 0x....      BL       TIM_Cmd
    225             while(!TIM_GetFlagStatus(US_TIMER, TIM_FLAG_Update));
   \                     ??HCSR04GetDistance_0: (+1)
   \       0x12   0x2101             MOVS     R1,#+1
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0x.... 0x....      BL       TIM_GetFlagStatus
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD0F9             BEQ.N    ??HCSR04GetDistance_0
    226             TIM_Cmd(US_TIMER, DISABLE);
   \       0x1E   0x2100             MOVS     R1,#+0
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0x.... 0x....      BL       TIM_Cmd
    227             TIM_ClearFlag(US_TIMER, TIM_FLAG_Update);
   \       0x26   0x2101             MOVS     R1,#+1
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       TIM_ClearFlag
    228             return (TIM_GetCapture2(US_TIMER)-TIM_GetCapture1(US_TIMER))*165/1000;
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x.... 0x....      BL       TIM_GetCapture2
   \       0x34   0x0005             MOVS     R5,R0
   \       0x36   0xB2AD             UXTH     R5,R5
   \       0x38   0x0020             MOVS     R0,R4
   \       0x3A   0x.... 0x....      BL       TIM_GetCapture1
   \       0x3E   0x1A2D             SUBS     R5,R5,R0
   \       0x40   0x20A5             MOVS     R0,#+165
   \       0x42   0x4345             MULS     R5,R0,R5
   \       0x44   0xF44F 0x707A      MOV      R0,#+1000
   \       0x48   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \       0x4C   0xBD32             POP      {R1,R4,R5,PC}
    229          }
    230          //update

   \                                 In section .text, align 2, keep-with-next
    231          int32_t HCSR04GetDistance2() {
   \                     HCSR04GetDistance2: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    232             (TIM5)->CNT = 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x....             LDR.N    R1,??DataTable8_6
   \        0x6   0x8008             STRH     R0,[R1, #+0]
    233             TIM_Cmd(TIM5, ENABLE);
   \        0x8   0x....             LDR.N    R4,??DataTable8_2
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x.... 0x....      BL       TIM_Cmd
    234             while(!TIM_GetFlagStatus(TIM5, TIM_FLAG_Update));
   \                     ??HCSR04GetDistance2_0: (+1)
   \       0x12   0x2101             MOVS     R1,#+1
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0x.... 0x....      BL       TIM_GetFlagStatus
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD0F9             BEQ.N    ??HCSR04GetDistance2_0
    235             TIM_Cmd(TIM5, DISABLE);
   \       0x1E   0x2100             MOVS     R1,#+0
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0x.... 0x....      BL       TIM_Cmd
    236             TIM_ClearFlag(TIM5, TIM_FLAG_Update);
   \       0x26   0x2101             MOVS     R1,#+1
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       TIM_ClearFlag
    237             return (TIM_GetCapture2(TIM5)-TIM_GetCapture1(TIM5))*165/1000;
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x.... 0x....      BL       TIM_GetCapture2
   \       0x34   0x0005             MOVS     R5,R0
   \       0x36   0xB2AD             UXTH     R5,R5
   \       0x38   0x0020             MOVS     R0,R4
   \       0x3A   0x.... 0x....      BL       TIM_GetCapture1
   \       0x3E   0x1A2D             SUBS     R5,R5,R0
   \       0x40   0x20A5             MOVS     R0,#+165
   \       0x42   0x4345             MULS     R5,R0,R5
   \       0x44   0xF44F 0x707A      MOV      R0,#+1000
   \       0x48   0xFB95 0xF0F0      SDIV     R0,R5,R0
   \       0x4C   0xBD32             POP      {R1,R4,R5,PC}
    238          }
    239          

   \                                 In section .bss, align 4
    240          int cnt;
   \                     cnt:
   \        0x0                      DS8 4
    241          //------------------have to change below

   \                                 In section .text, align 2, keep-with-next
    242          int32_t HCSR04GetDistance3() {
   \                     HCSR04GetDistance3: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    243             (TIM2)->CNT = 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x....             LDR.N    R1,??DataTable8_7
   \        0x6   0x8008             STRH     R0,[R1, #+0]
    244             cnt++;
   \        0x8   0x....             LDR.N    R0,??DataTable8_8
   \        0xA   0x6801             LDR      R1,[R0, #+0]
   \        0xC   0x1C49             ADDS     R1,R1,#+1
   \        0xE   0x6001             STR      R1,[R0, #+0]
    245             TIM_Cmd(TIM2, ENABLE);
   \       0x10   0x2101             MOVS     R1,#+1
   \       0x12   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x16   0x.... 0x....      BL       TIM_Cmd
    246             while(!TIM_GetFlagStatus(TIM2, TIM_FLAG_CC2));
   \                     ??HCSR04GetDistance3_0: (+1)
   \       0x1A   0x2104             MOVS     R1,#+4
   \       0x1C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x20   0x.... 0x....      BL       TIM_GetFlagStatus
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD0F8             BEQ.N    ??HCSR04GetDistance3_0
    247             TIM_Cmd(TIM2, DISABLE);
   \       0x28   0x2100             MOVS     R1,#+0
   \       0x2A   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x2E   0x.... 0x....      BL       TIM_Cmd
    248             TIM_ClearFlag(TIM2, TIM_FLAG_CC2);
   \       0x32   0x2104             MOVS     R1,#+4
   \       0x34   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x38   0x.... 0x....      BL       TIM_ClearFlag
    249             return ((TIM_GetCapture2(TIM2))-(TIM_GetCapture1(TIM2)))*165/1000;
   \       0x3C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x40   0x.... 0x....      BL       TIM_GetCapture2
   \       0x44   0x0004             MOVS     R4,R0
   \       0x46   0xB2A4             UXTH     R4,R4
   \       0x48   0xF05F 0x4080      MOVS     R0,#+1073741824
   \       0x4C   0x.... 0x....      BL       TIM_GetCapture1
   \       0x50   0x1A24             SUBS     R4,R4,R0
   \       0x52   0x20A5             MOVS     R0,#+165
   \       0x54   0x4344             MULS     R4,R0,R4
   \       0x56   0xF44F 0x707A      MOV      R0,#+1000
   \       0x5A   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \       0x5E   0xBD10             POP      {R4,PC}
    250          }
    251          

   \                                 In section .text, align 2, keep-with-next
    252          int delayByTim2(){
    253            return cnt;
   \                     delayByTim2: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable8_8
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR
    254          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0x000F'4240        DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \        0x0   0x4000'0C00        DC32     0x40000c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \        0x0   0x4001'0800        DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \        0x0   0x4001'0C00        DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \        0x0   0x4000'0424        DC32     0x40000424

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \        0x0   0x4000'0C24        DC32     0x40000c24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \        0x0   0x4000'0024        DC32     0x40000024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \        0x0   0x....'....        DC32     cnt

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   EnableHCSR04PeriphClock
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
      16   HCSR04GetDistance
        16   -> TIM_ClearFlag
        16   -> TIM_Cmd
        16   -> TIM_GetCapture1
        16   -> TIM_GetCapture2
        16   -> TIM_GetFlagStatus
      16   HCSR04GetDistance2
        16   -> TIM_ClearFlag
        16   -> TIM_Cmd
        16   -> TIM_GetCapture1
        16   -> TIM_GetCapture2
        16   -> TIM_GetFlagStatus
       8   HCSR04GetDistance3
         8   -> TIM_ClearFlag
         8   -> TIM_Cmd
         8   -> TIM_GetCapture1
         8   -> TIM_GetCapture2
         8   -> TIM_GetFlagStatus
       8   InitHCSR04
         8   -> EnableHCSR04PeriphClock
         8   -> initMeasureTimer
         8   -> initMeasureTimer2
         8   -> initMeasureTimer3
         8   -> initPins
       0   delayByTim2
      72   initMeasureTimer
        72   -> RCC_GetClocksFreq
        72   -> TIM_ClearFlag
        72   -> TIM_CtrlPWMOutputs
        72   -> TIM_DeInit
        72   -> TIM_OC3Init
        72   -> TIM_OCStructInit
        72   -> TIM_PWMIConfig
        72   -> TIM_SelectInputTrigger
        72   -> TIM_SelectMasterSlaveMode
        72   -> TIM_TimeBaseInit
      72   initMeasureTimer2
        72   -> RCC_GetClocksFreq
        72   -> TIM_ClearFlag
        72   -> TIM_CtrlPWMOutputs
        72   -> TIM_DeInit
        72   -> TIM_OC3Init
        72   -> TIM_OCStructInit
        72   -> TIM_PWMIConfig
        72   -> TIM_SelectInputTrigger
        72   -> TIM_SelectMasterSlaveMode
        72   -> TIM_TimeBaseInit
      72   initMeasureTimer3
        72   -> RCC_GetClocksFreq
        72   -> TIM_ClearFlag
        72   -> TIM_CtrlPWMOutputs
        72   -> TIM_DeInit
        72   -> TIM_OC4Init
        72   -> TIM_OCStructInit
        72   -> TIM_PWMIConfig
        72   -> TIM_SelectInputTrigger
        72   -> TIM_SelectMasterSlaveMode
        72   -> TIM_TimeBaseInit
      16   initPins
        16   -> GPIO_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
      44  EnableHCSR04PeriphClock
      78  HCSR04GetDistance
      78  HCSR04GetDistance2
      96  HCSR04GetDistance3
      24  InitHCSR04
       4  cnt
       6  delayByTim2
     174  initMeasureTimer
     172  initMeasureTimer2
     186  initMeasureTimer3
     162  initPins

 
     4 bytes in section .bss
 1'056 bytes in section .text
 
 1'056 bytes of CODE memory
     4 bytes of DATA memory

Errors: none
Warnings: none
